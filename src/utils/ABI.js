const  abi = {
  "contractName": "Hujan",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "comment",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "parentComment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commentTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commentId",
          "type": "uint256"
        }
      ],
      "name": "CommentCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "donationValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "donationTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "postid",
          "type": "uint256"
        }
      ],
      "name": "DonationMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "author",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "tags",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "postTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "title",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "text",
          "type": "bytes"
        }
      ],
      "name": "PostContent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "username",
          "type": "bytes32"
        }
      ],
      "name": "UsernameCreated",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "title",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "text",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "tags",
          "type": "bytes"
        }
      ],
      "name": "CreatePost",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        }
      ],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        }
      ],
      "name": "UpvotePost",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        }
      ],
      "name": "DownvotePost",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        }
      ],
      "name": "getUpVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        }
      ],
      "name": "getDownVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "getVoterData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "text",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "parentComment",
          "type": "uint256"
        }
      ],
      "name": "PostComment",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commendId",
          "type": "uint256"
        }
      ],
      "name": "UpvoteComment",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commendId",
          "type": "uint256"
        }
      ],
      "name": "DownvoteComment",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commendId",
          "type": "uint256"
        }
      ],
      "name": "getCommentUpVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commendId",
          "type": "uint256"
        }
      ],
      "name": "getCommentDownVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commendId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "commenter",
          "type": "address"
        }
      ],
      "name": "getCommentVoterData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getPostCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        }
      ],
      "name": "makeDonation",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        }
      ],
      "name": "getPostDonations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "username",
          "type": "bytes32"
        }
      ],
      "name": "SetUsername",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUsername",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getSenderAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"comment\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentComment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commentTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commentId\",\"type\":\"uint256\"}],\"name\":\"CommentCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"donationValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"donationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"postid\",\"type\":\"uint256\"}],\"name\":\"DonationMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"tags\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"postTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"title\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"text\",\"type\":\"bytes\"}],\"name\":\"PostContent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"username\",\"type\":\"bytes32\"}],\"name\":\"UsernameCreated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"title\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"text\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"tags\",\"type\":\"bytes\"}],\"name\":\"CreatePost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commendId\",\"type\":\"uint256\"}],\"name\":\"DownvoteComment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"DownvotePost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"text\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parentComment\",\"type\":\"uint256\"}],\"name\":\"PostComment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"username\",\"type\":\"bytes32\"}],\"name\":\"SetUsername\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commendId\",\"type\":\"uint256\"}],\"name\":\"UpvoteComment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"UpvotePost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commendId\",\"type\":\"uint256\"}],\"name\":\"getCommentDownVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commendId\",\"type\":\"uint256\"}],\"name\":\"getCommentUpVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commendId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"commenter\",\"type\":\"address\"}],\"name\":\"getCommentVoterData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"getDownVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPostCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"getPostDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSenderAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"getUpVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUsername\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getVoterData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"makeDonation\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/mnt/d/AGIN-WORKS-GITHUB/HACK-AFRICA/new/SafuSpeak-main/Solidity/contracts/Hujan.sol\":\"Hujan\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/mnt/d/AGIN-WORKS-GITHUB/HACK-AFRICA/new/SafuSpeak-main/Solidity/contracts/Hujan.sol\":{\"keccak256\":\"0xac6fd8dd9ce909a6cf62464881940a938230277572db996673f11bc931101cf1\",\"urls\":[\"bzz-raw://d3827d91ed74df212cf40065be1fe443529e9b956e6687778c43c7d6890d3b70\",\"dweb:/ipfs/QmXydZyvgQy5p1XVz8uUfyJGAREFKPUzaUdyEmGhQRTy9M\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060008055611486806100246000396000f3fe6080604052600436106101145760003560e01c80637bc43f56116100a0578063b219f91611610064578063b219f916146105c4578063c41a360a146105e1578063ce43c0321461060b578063d121c61a1461063e578063e6e553331461066857610114565b80637bc43f56146104e05780637dc1aae4146105105780637e6ab91614610540578063a0a5c2b61461056a578063a4245e671461059a57610114565b806342948e18116100e757806342948e181461037557806349ad53ee146103a65780634e595e3a146103e5578063582e04881461041557806368b6883e1461042a57610114565b80630cbe957e146101195780630d898f48146102d65780630dad041e1461031257806335c8d82b1461033c575b600080fd5b34801561012557600080fd5b506102d46004803603606081101561013c57600080fd5b810190602081018135600160201b81111561015657600080fd5b82018360208201111561016857600080fd5b803590602001918460018302840111600160201b8311171561018957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156101db57600080fd5b8201836020820111156101ed57600080fd5b803590602001918460018302840111600160201b8311171561020e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561026057600080fd5b82018360208201111561027257600080fd5b803590602001918460018302840111600160201b8311171561029357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610692945050505050565b005b3480156102e257600080fd5b50610300600480360360208110156102f957600080fd5b503561092b565b60408051918252519081900360200190f35b34801561031e57600080fd5b506102d46004803603602081101561033557600080fd5b503561093d565b34801561034857600080fd5b506103006004803603604081101561035f57600080fd5b50803590602001356001600160a01b0316610a38565b34801561038157600080fd5b5061038a610a5d565b604080516001600160a01b039092168252519081900360200190f35b3480156103b257600080fd5b50610300600480360360608110156103c957600080fd5b50803590602081013590604001356001600160a01b0316610a61565b3480156103f157600080fd5b506102d46004803603604081101561040857600080fd5b5080359060200135610a90565b34801561042157600080fd5b50610300610c34565b34801561043657600080fd5b506102d46004803603606081101561044d57600080fd5b810190602081018135600160201b81111561046757600080fd5b82018360208201111561047957600080fd5b803590602001918460018302840111600160201b8311171561049a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060200135610c3a565b3480156104ec57600080fd5b506102d46004803603604081101561050357600080fd5b5080359060200135610e18565b34801561051c57600080fd5b506103006004803603604081101561053357600080fd5b5080359060200135610fbb565b34801561054c57600080fd5b506103006004803603602081101561056357600080fd5b5035610fd8565b34801561057657600080fd5b506103006004803603604081101561058d57600080fd5b5080359060200135610fea565b3480156105a657600080fd5b50610300600480360360208110156105bd57600080fd5b5035611007565b6102d4600480360360208110156105da57600080fd5b5035611019565b3480156105ed57600080fd5b5061038a6004803603602081101561060457600080fd5b503561114a565b34801561061757600080fd5b506103006004803603602081101561062e57600080fd5b50356001600160a01b0316611165565b34801561064a57600080fd5b506102d46004803603602081101561066157600080fd5b5035611180565b34801561067457600080fd5b506102d46004803603602081101561068b57600080fd5b50356112bd565b60008351116106d8576040805162461bcd60e51b815260206004820152600d60248201526c496e76616c6964207469746c6560981b604482015290519081900360640190fd5b600082511161071d576040805162461bcd60e51b815260206004820152600c60248201526b125b9d985b1a59081d195e1d60a21b604482015290519081900360640190fd5b6000815111610762576040805162461bcd60e51b815260206004820152600c60248201526b496e76616c6964207461677360a01b604482015290519081900360640190fd5b6000805480825260016020818152604080852080546001600160a01b03191633908117909155600283528186208490558086526004835281862085875283528186209390935580514281840181905260808083528851908301528751959687967fdc220f0be468e8336935034fc4829e5d0e772978345b486fa47d2d09bd32cc11958a9593948d948d949193849391840192606085019260a0860192908b01918190849084905b83811015610821578181015183820152602001610809565b50505050905090810190601f16801561084e5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015610881578181015183820152602001610869565b50505050905090810190601f1680156108ae5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156108e15781810151838201526020016108c9565b50505050905090810190601f16801561090e5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a3600101600055505050565b60009081526003602052604090205490565b6000548110610981576040805162461bcd60e51b81526020600482018190526024820152600080516020611408833981519152604482015290519081900360640190fd5b33600090815260046020908152604080832084845290915290205460028114156109ea576040805162461bcd60e51b8152602060048201526015602482015274646f776e766f746520616c726561647920646f6e6560581b604482015290519081900360640190fd5b8060011415610a0a57600082815260026020526040902080546000190190555b5033600090815260046020908152604080832093835292815282822060029055600390522080546001019055565b6001600160a01b03166000908152600460209081526040808320938352929052205490565b3390565b6001600160a01b0316600090815260096020908152604080832094835293815283822092825291909152205490565b6000548210610ad4576040805162461bcd60e51b81526020600482018190526024820152600080516020611408833981519152604482015290519081900360640190fd5b600082815260056020526040902054811115610b37576040805162461bcd60e51b815260206004820152601a60248201527f636f6d6d656e74206964206973206e6f6e206578697374656e74000000000000604482015290519081900360640190fd5b336000908152600960209081526040808320858452825280832084845290915290205460011415610ba5576040805162461bcd60e51b81526020600482015260136024820152725570766f746520616c726561647920646f6e6560681b604482015290519081900360640190fd5b336000908152600960209081526040808320858452825280832084845290915290205460021415610bf2576000828152600860209081526040808320848452909152902080546000190190555b33600090815260096020908152604080832085845282528083208484528252808320600190819055948352600782528083209383529290522080549091019055565b60005490565b6000548210610c7a5760405162461bcd60e51b81526004018080602001828103825260228152602001806113e66022913960400191505060405180910390fd5b6000835111610cd0576040805162461bcd60e51b815260206004820152601860248201527f636f6d6d656e7420636f6d6d656e7420697320656d7074790000000000000000604482015290519081900360640190fd5b60006005600084815260200190815260200160002054905082336001600160a01b03167f5c7252053e11b0d1b89164a47c163c5f5027f50b79dc32cc22920d6bc21e189a868542866040518080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b83811015610d67578181015183820152602001610d4f565b50505050905090810190601f168015610d945780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a36000838152600660209081526040808320848452825280832080546001600160a01b0319163390811790915586845260078352818420858552835281842060019081905590845260098352818420878552835281842085855283528184208190559583526005909152902092019091555050565b6000548210610e5c576040805162461bcd60e51b81526020600482018190526024820152600080516020611408833981519152604482015290519081900360640190fd5b600082815260056020526040902054811115610ebf576040805162461bcd60e51b815260206004820152601a60248201527f636f6d6d656e74206964206973206e6f6e206578697374656e74000000000000604482015290519081900360640190fd5b336000908152600960209081526040808320858452825280832084845290915290205460021415610f2d576040805162461bcd60e51b81526020600482015260136024820152725570766f746520616c726561647920646f6e6560681b604482015290519081900360640190fd5b336000908152600960209081526040808320858452825280832084845290915290205460011415610f7a576000828152600760209081526040808320848452909152902080546000190190555b336000908152600960209081526040808320858452825280832084845282528083206002905593825260088152838220928252919091522080546001019055565b600091825260076020908152604080842092845291905290205490565b60009081526002602052604090205490565b600091825260086020908152604080842092845291905290205490565b6000908152600a602052604090205490565b60003411611062576040805162461bcd60e51b81526020600482015260116024820152706e6f2061747461636865642076616c756560781b604482015290519081900360640190fd5b60005481106110a6576040805162461bcd60e51b81526020600482018190526024820152600080516020611408833981519152604482015290519081900360640190fd5b6000818152600160205260408082205490516001600160a01b039091169182913480156108fc0292909190818181858888f193505050501580156110ee573d6000803e3d6000fd5b506000828152600a602090815260409182902080543490810190915582514281529182018590528251909233927fd7570171f3eec5b5e70a829a2f7b1a40853d0159967de2efe2bf99208b9a560d929081900390910190a35050565b6000908152600160205260409020546001600160a01b031690565b6001600160a01b03166000908152600c602052604090205490565b6000818152600b602052604090205460ff16156111ce5760405162461bcd60e51b815260040180806020018281038252602a815260200180611428602a913960400191505060405180910390fd5b336000908152600c60205260409020548181141561121d5760405162461bcd60e51b815260040180806020018281038252602a8152602001806113bc602a913960400191505060405180910390fd5b8061125157336000908152600c60209081526040808320859055848352600b9091529020805460ff1916600117905561128c565b336000908152600c60209081526040808320859055848352600b909152808220805460ff199081166001179091558383529120805490911690555b604051829033907f98669deded710d3d7f0c348e87e0a023ce76d0784aa090cb348048e3f9c88a3490600090a35050565b6000548110611301576040805162461bcd60e51b81526020600482018190526024820152600080516020611408833981519152604482015290519081900360640190fd5b3360009081526004602090815260408083208484529091529020546001811415611368576040805162461bcd60e51b81526020600482015260136024820152725570766f746520616c726561647920646f6e6560681b604482015290519081900360640190fd5b806002141561138857600082815260036020526040902080546000190190555b5033600090815260046020908152604080832093835292815282822060019081905560029091529190208054909101905556fe5468697320757365726e616d6520697320616c72656164792073657420746f207468652073656e646572636f6d6d656e7420697320666f722061206e6f6e206578697374656e7420706f7374766f74657320697320666f722061206e6f6e206578697374656e7420706f7374757365726e616d65206973207265676973746572656420746f20616e206f776e657220616c7265616479a265627a7a7231582084f455e35b8729f56c6360560617281dbc17dddb80131331ba0546947c804a1164736f6c63430005100032",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c80637bc43f56116100a0578063b219f91611610064578063b219f916146105c4578063c41a360a146105e1578063ce43c0321461060b578063d121c61a1461063e578063e6e553331461066857610114565b80637bc43f56146104e05780637dc1aae4146105105780637e6ab91614610540578063a0a5c2b61461056a578063a4245e671461059a57610114565b806342948e18116100e757806342948e181461037557806349ad53ee146103a65780634e595e3a146103e5578063582e04881461041557806368b6883e1461042a57610114565b80630cbe957e146101195780630d898f48146102d65780630dad041e1461031257806335c8d82b1461033c575b600080fd5b34801561012557600080fd5b506102d46004803603606081101561013c57600080fd5b810190602081018135600160201b81111561015657600080fd5b82018360208201111561016857600080fd5b803590602001918460018302840111600160201b8311171561018957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156101db57600080fd5b8201836020820111156101ed57600080fd5b803590602001918460018302840111600160201b8311171561020e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561026057600080fd5b82018360208201111561027257600080fd5b803590602001918460018302840111600160201b8311171561029357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610692945050505050565b005b3480156102e257600080fd5b50610300600480360360208110156102f957600080fd5b503561092b565b60408051918252519081900360200190f35b34801561031e57600080fd5b506102d46004803603602081101561033557600080fd5b503561093d565b34801561034857600080fd5b506103006004803603604081101561035f57600080fd5b50803590602001356001600160a01b0316610a38565b34801561038157600080fd5b5061038a610a5d565b604080516001600160a01b039092168252519081900360200190f35b3480156103b257600080fd5b50610300600480360360608110156103c957600080fd5b50803590602081013590604001356001600160a01b0316610a61565b3480156103f157600080fd5b506102d46004803603604081101561040857600080fd5b5080359060200135610a90565b34801561042157600080fd5b50610300610c34565b34801561043657600080fd5b506102d46004803603606081101561044d57600080fd5b810190602081018135600160201b81111561046757600080fd5b82018360208201111561047957600080fd5b803590602001918460018302840111600160201b8311171561049a57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505082359350505060200135610c3a565b3480156104ec57600080fd5b506102d46004803603604081101561050357600080fd5b5080359060200135610e18565b34801561051c57600080fd5b506103006004803603604081101561053357600080fd5b5080359060200135610fbb565b34801561054c57600080fd5b506103006004803603602081101561056357600080fd5b5035610fd8565b34801561057657600080fd5b506103006004803603604081101561058d57600080fd5b5080359060200135610fea565b3480156105a657600080fd5b50610300600480360360208110156105bd57600080fd5b5035611007565b6102d4600480360360208110156105da57600080fd5b5035611019565b3480156105ed57600080fd5b5061038a6004803603602081101561060457600080fd5b503561114a565b34801561061757600080fd5b506103006004803603602081101561062e57600080fd5b50356001600160a01b0316611165565b34801561064a57600080fd5b506102d46004803603602081101561066157600080fd5b5035611180565b34801561067457600080fd5b506102d46004803603602081101561068b57600080fd5b50356112bd565b60008351116106d8576040805162461bcd60e51b815260206004820152600d60248201526c496e76616c6964207469746c6560981b604482015290519081900360640190fd5b600082511161071d576040805162461bcd60e51b815260206004820152600c60248201526b125b9d985b1a59081d195e1d60a21b604482015290519081900360640190fd5b6000815111610762576040805162461bcd60e51b815260206004820152600c60248201526b496e76616c6964207461677360a01b604482015290519081900360640190fd5b6000805480825260016020818152604080852080546001600160a01b03191633908117909155600283528186208490558086526004835281862085875283528186209390935580514281840181905260808083528851908301528751959687967fdc220f0be468e8336935034fc4829e5d0e772978345b486fa47d2d09bd32cc11958a9593948d948d949193849391840192606085019260a0860192908b01918190849084905b83811015610821578181015183820152602001610809565b50505050905090810190601f16801561084e5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015610881578181015183820152602001610869565b50505050905090810190601f1680156108ae5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156108e15781810151838201526020016108c9565b50505050905090810190601f16801561090e5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a3600101600055505050565b60009081526003602052604090205490565b6000548110610981576040805162461bcd60e51b81526020600482018190526024820152600080516020611408833981519152604482015290519081900360640190fd5b33600090815260046020908152604080832084845290915290205460028114156109ea576040805162461bcd60e51b8152602060048201526015602482015274646f776e766f746520616c726561647920646f6e6560581b604482015290519081900360640190fd5b8060011415610a0a57600082815260026020526040902080546000190190555b5033600090815260046020908152604080832093835292815282822060029055600390522080546001019055565b6001600160a01b03166000908152600460209081526040808320938352929052205490565b3390565b6001600160a01b0316600090815260096020908152604080832094835293815283822092825291909152205490565b6000548210610ad4576040805162461bcd60e51b81526020600482018190526024820152600080516020611408833981519152604482015290519081900360640190fd5b600082815260056020526040902054811115610b37576040805162461bcd60e51b815260206004820152601a60248201527f636f6d6d656e74206964206973206e6f6e206578697374656e74000000000000604482015290519081900360640190fd5b336000908152600960209081526040808320858452825280832084845290915290205460011415610ba5576040805162461bcd60e51b81526020600482015260136024820152725570766f746520616c726561647920646f6e6560681b604482015290519081900360640190fd5b336000908152600960209081526040808320858452825280832084845290915290205460021415610bf2576000828152600860209081526040808320848452909152902080546000190190555b33600090815260096020908152604080832085845282528083208484528252808320600190819055948352600782528083209383529290522080549091019055565b60005490565b6000548210610c7a5760405162461bcd60e51b81526004018080602001828103825260228152602001806113e66022913960400191505060405180910390fd5b6000835111610cd0576040805162461bcd60e51b815260206004820152601860248201527f636f6d6d656e7420636f6d6d656e7420697320656d7074790000000000000000604482015290519081900360640190fd5b60006005600084815260200190815260200160002054905082336001600160a01b03167f5c7252053e11b0d1b89164a47c163c5f5027f50b79dc32cc22920d6bc21e189a868542866040518080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b83811015610d67578181015183820152602001610d4f565b50505050905090810190601f168015610d945780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a36000838152600660209081526040808320848452825280832080546001600160a01b0319163390811790915586845260078352818420858552835281842060019081905590845260098352818420878552835281842085855283528184208190559583526005909152902092019091555050565b6000548210610e5c576040805162461bcd60e51b81526020600482018190526024820152600080516020611408833981519152604482015290519081900360640190fd5b600082815260056020526040902054811115610ebf576040805162461bcd60e51b815260206004820152601a60248201527f636f6d6d656e74206964206973206e6f6e206578697374656e74000000000000604482015290519081900360640190fd5b336000908152600960209081526040808320858452825280832084845290915290205460021415610f2d576040805162461bcd60e51b81526020600482015260136024820152725570766f746520616c726561647920646f6e6560681b604482015290519081900360640190fd5b336000908152600960209081526040808320858452825280832084845290915290205460011415610f7a576000828152600760209081526040808320848452909152902080546000190190555b336000908152600960209081526040808320858452825280832084845282528083206002905593825260088152838220928252919091522080546001019055565b600091825260076020908152604080842092845291905290205490565b60009081526002602052604090205490565b600091825260086020908152604080842092845291905290205490565b6000908152600a602052604090205490565b60003411611062576040805162461bcd60e51b81526020600482015260116024820152706e6f2061747461636865642076616c756560781b604482015290519081900360640190fd5b60005481106110a6576040805162461bcd60e51b81526020600482018190526024820152600080516020611408833981519152604482015290519081900360640190fd5b6000818152600160205260408082205490516001600160a01b039091169182913480156108fc0292909190818181858888f193505050501580156110ee573d6000803e3d6000fd5b506000828152600a602090815260409182902080543490810190915582514281529182018590528251909233927fd7570171f3eec5b5e70a829a2f7b1a40853d0159967de2efe2bf99208b9a560d929081900390910190a35050565b6000908152600160205260409020546001600160a01b031690565b6001600160a01b03166000908152600c602052604090205490565b6000818152600b602052604090205460ff16156111ce5760405162461bcd60e51b815260040180806020018281038252602a815260200180611428602a913960400191505060405180910390fd5b336000908152600c60205260409020548181141561121d5760405162461bcd60e51b815260040180806020018281038252602a8152602001806113bc602a913960400191505060405180910390fd5b8061125157336000908152600c60209081526040808320859055848352600b9091529020805460ff1916600117905561128c565b336000908152600c60209081526040808320859055848352600b909152808220805460ff199081166001179091558383529120805490911690555b604051829033907f98669deded710d3d7f0c348e87e0a023ce76d0784aa090cb348048e3f9c88a3490600090a35050565b6000548110611301576040805162461bcd60e51b81526020600482018190526024820152600080516020611408833981519152604482015290519081900360640190fd5b3360009081526004602090815260408083208484529091529020546001811415611368576040805162461bcd60e51b81526020600482015260136024820152725570766f746520616c726561647920646f6e6560681b604482015290519081900360640190fd5b806002141561138857600082815260036020526040902080546000190190555b5033600090815260046020908152604080832093835292815282822060019081905560029091529190208054909101905556fe5468697320757365726e616d6520697320616c72656164792073657420746f207468652073656e646572636f6d6d656e7420697320666f722061206e6f6e206578697374656e7420706f7374766f74657320697320666f722061206e6f6e206578697374656e7420706f7374757365726e616d65206973207265676973746572656420746f20616e206f776e657220616c7265616479a265627a7a7231582084f455e35b8729f56c6360560617281dbc17dddb80131331ba0546947c804a1164736f6c63430005100032",
  "sourceMap": "27:9940:1:-;;;1401:53;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1446:1:1;1433:14;;27:9940;;;;;;",
  "deployedSourceMap": "27:9940:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1919:776;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1919:776:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1919:776:1;;;;;;;;-1:-1:-1;;;5:28;;2:2;;;46:1;43;36:12;2:2;1919:776:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1919:776:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1919:776:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;1919:776:1;;;;;;;;-1:-1:-1;1919:776:1;;-1:-1:-1;;;;;5:28;;2:2;;;46:1;43;36:12;2:2;1919:776:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1919:776:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1919:776:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;1919:776:1;;;;;;;;-1:-1:-1;1919:776:1;;-1:-1:-1;;;;;5:28;;2:2;;;46:1;43;36:12;2:2;1919:776:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1919:776:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1919:776:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;1919:776:1;;-1:-1:-1;1919:776:1;;-1:-1:-1;;;;;1919:776:1:i;:::-;;3957:103;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3957:103:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3957:103:1;;:::i;:::-;;;;;;;;;;;;;;;;3350:444;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3350:444:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3350:444:1;;:::i;4095:122::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4095:122:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4095:122:1;;;;;;-1:-1:-1;;;;;4095:122:1;;:::i;9873:92::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9873:92:1;;;:::i;:::-;;;;-1:-1:-1;;;;;9873:92:1;;;;;;;;;;;;;;7167:171;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7167:171:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7167:171:1;;;;;;;;;;;-1:-1:-1;;;;;7167:171:1;;:::i;5349:684::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5349:684:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5349:684:1;;;;;;;:::i;7381:87::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7381:87:1;;;:::i;4518:800::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4518:800:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4518:800:1;;;;;;;;-1:-1:-1;;;5:28;;2:2;;;46:1;43;36:12;2:2;4518:800:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4518:800:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;4518:800:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;4518:800:1;;-1:-1:-1;;4518:800:1;;;-1:-1:-1;;;4518:800:1;;;;:::i;6066:694::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6066:694:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6066:694:1;;;;;;;:::i;6802:140::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6802:140:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6802:140:1;;;;;;;:::i;3828:99::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3828:99:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3828:99:1;;:::i;6980:144::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6980:144:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6980:144:1;;;;;;;:::i;8262:110::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8262:110:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8262:110:1;;:::i;7534:497::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7534:497:1;;:::i;2735:103::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2735:103:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2735:103:1;;:::i;9722:104::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9722:104:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;9722:104:1;-1:-1:-1;;;;;9722:104:1;;:::i;8739:923::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8739:923:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8739:923:1;;:::i;2869:448::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2869:448:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2869:448:1;;:::i;1919:776::-;2087:1;2072:5;:12;:16;2064:42;;;;;-1:-1:-1;;;2064:42:1;;;;;;;;;;;;-1:-1:-1;;;2064:42:1;;;;;;;;;;;;;;;2138:1;2124:4;:11;:15;2116:40;;;;;-1:-1:-1;;;2116:40:1;;;;;;;;;;;;-1:-1:-1;;;2116:40:1;;;;;;;;;;;;;;;2188:1;2174:4;:11;:15;2166:40;;;;;-1:-1:-1;;;2166:40:1;;;;;;;;;;;;-1:-1:-1;;;2166:40:1;;;;;;;;;;;;;;;2225:11;2239:10;;2318:18;;;:10;:18;;;;;;;;:31;;-1:-1:-1;;;;;;2318:31:1;2339:10;2318:31;;;;;;2431:7;:15;;;;;:19;;;2460:18;;;:6;:18;;;;;:26;;;;;;;;:30;;;;2591:55;;2629:3;2591:55;;;;;;;;;;;;;;;;;;2239:10;;;;2591:55;;2623:4;;2629:3;;2634:5;;2641:4;;2591:55;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2591:55:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2591:55:1;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2591:55:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2591:55:1;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2591:55:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2687:1;2678:10;2665;:23;-1:-1:-1;;;1919:776:1:o;3957:103::-;4013:4;4036:17;;;:9;:17;;;;;;;3957:103::o;3350:444::-;3482:10;;3473:6;:19;3465:64;;;;;-1:-1:-1;;;3465:64:1;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;3465:64:1;;;;;;;;;;;;;;;3564:10;3540:14;3557:18;;;:6;:18;;;;;;;;:26;;;;;;;;;3614:1;3601:14;;;3593:48;;;;;-1:-1:-1;;;3593:48:1;;;;;;;;;;;;-1:-1:-1;;;3593:48:1;;;;;;;;;;;;;;;3655:9;3668:1;3655:14;3651:65;;;3685:15;;;;:7;:15;;;;;:20;;-1:-1:-1;;3685:20:1;;;3651:65;-1:-1:-1;3732:10:1;3725:18;;;;:6;:18;;;;;;;;:26;;;;;;;;;3754:1;3725:30;;3765:9;:17;;;:22;;3786:1;3765:22;;;3350:444::o;4095:122::-;-1:-1:-1;;;;;4189:13:1;4166:4;4189:13;;;:6;:13;;;;;;;;:21;;;;;;;;;4095:122::o;9873:92::-;9948:10;9873:92;:::o;7167:171::-;-1:-1:-1;;;;;7288:24:1;7265:4;7288:24;;;:13;:24;;;;;;;;:32;;;;;;;;;:43;;;;;;;;;;7167:171::o;5349:684::-;5498:10;;5489:6;:19;5481:64;;;;;-1:-1:-1;;;5481:64:1;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;5481:64:1;;;;;;;;;;;;;;;5645:22;;;;:14;:22;;;;;;5632:35;;;5624:74;;;;;-1:-1:-1;;;5624:74:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;5730:10;5716:25;;;;:13;:25;;;;;;;;:33;;;;;;;;:44;;;;;;;;;5764:1;5716:49;;5708:81;;;;;-1:-1:-1;;;5708:81:1;;;;;;;;;;;;-1:-1:-1;;;5708:81:1;;;;;;;;;;;;;;;5818:10;5804:25;;;;:13;:25;;;;;;;;:33;;;;;;;;:44;;;;;;;;;5852:1;5804:49;5800:120;;;5869:24;;;;:16;:24;;;;;;;;:35;;;;;;;;:40;;-1:-1:-1;;5869:40:1;;;5800:120;5944:10;5930:25;;;;:13;:25;;;;;;;;:33;;;;;;;;:44;;;;;;;;5977:1;5930:48;;;;5988:22;;;:14;:22;;;;;:33;;;;;;;:38;;;;;;;5349:684::o;7381:87::-;7428:4;7451:10;7381:87;:::o;4518:800::-;4690:10;;4681:6;:19;4673:66;;;;-1:-1:-1;;;4673:66:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4771:1;4757:4;:11;:15;4749:52;;;;;-1:-1:-1;;;4749:52:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;4851:14;4868;:22;4883:6;4868:22;;;;;;;;;;;;4851:39;;4962:6;4950:10;-1:-1:-1;;;;;4935:71:1;;4970:4;4976:13;4991:3;4996:9;4935:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;4935:71:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5026:20;;;;:12;:20;;;;;;;;:31;;;;;;;;:44;;-1:-1:-1;;;;;;5026:44:1;5060:10;5026:44;;;;;;5121:22;;;:14;:22;;;;;:33;;;;;;;;5026:44;5121:37;;;;5168:25;;;:13;:25;;;;;:33;;;;;;;;:44;;;;;;;;:48;;;5273:22;;;:14;:22;;;;;5298:13;;5273:38;;;-1:-1:-1;;4518:800:1:o;6066:694::-;6217:10;;6208:6;:19;6200:64;;;;;-1:-1:-1;;;6200:64:1;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;6200:64:1;;;;;;;;;;;;;;;6364:22;;;;:14;:22;;;;;;6351:35;;;6343:74;;;;;-1:-1:-1;;;6343:74:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;6449:10;6435:25;;;;:13;:25;;;;;;;;:33;;;;;;;;:44;;;;;;;;;6483:1;6435:49;;6427:81;;;;;-1:-1:-1;;;6427:81:1;;;;;;;;;;;;-1:-1:-1;;;6427:81:1;;;;;;;;;;;;;;;6545:10;6531:25;;;;:13;:25;;;;;;;;:33;;;;;;;;:44;;;;;;;;;6579:1;6531:49;6527:118;;;6596:22;;;;:14;:22;;;;;;;;:33;;;;;;;;:38;;-1:-1:-1;;6596:38:1;;;6527:118;6669:10;6655:25;;;;:13;:25;;;;;;;;:33;;;;;;;;:44;;;;;;;;6702:1;6655:48;;6713:24;;;:16;:24;;;;;:35;;;;;;;;:40;;6752:1;6713:40;;;6066:694::o;6802:140::-;6879:4;6902:22;;;:14;:22;;;;;;;;:33;;;;;;;;;;6802:140::o;3828:99::-;3882:4;3905:15;;;:7;:15;;;;;;;3828:99::o;6980:144::-;7059:4;7082:24;;;:16;:24;;;;;;;;:35;;;;;;;;;;6980:144::o;8262:110::-;8322:4;8345:20;;;:12;:20;;;;;;;8262:110::o;7534:497::-;7614:1;7602:9;:13;7594:43;;;;;-1:-1:-1;;;7594:43:1;;;;;;;;;;;;-1:-1:-1;;;7594:43:1;;;;;;;;;;;;;;;7727:10;;7718:6;:19;7710:64;;;;;-1:-1:-1;;;7710:64:1;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7710:64:1;;;;;;;;;;;;;;;7793:21;7833:18;;;:10;:18;;;;;;;7863:25;;-1:-1:-1;;;;;7833:18:1;;;;;;7878:9;7863:25;;;;;7878:9;;7863:25;;7793:21;7863:25;7878:9;7833:18;7863:25;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;7928:20:1;;;;:12;:20;;;;;;;;;:33;;7952:9;7928:33;;;;;;7976:48;;8012:3;7976:48;;;;;;;;;;7952:9;;7989:10;;7976:48;;;;;;;;;;;7534:497;;:::o;2735:103::-;2787:7;2813:18;;;:10;:18;;;;;;-1:-1:-1;;;;;2813:18:1;;2735:103::o;9722:104::-;-1:-1:-1;;;;;9804:15:1;9778:7;9804:15;;;:9;:15;;;;;;;9722:104::o;8739:923::-;8813:24;;;;:14;:24;;;;;;;;:33;8804:89;;;;-1:-1:-1;;;8804:89:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8948:10;8912:23;8938:21;;;:9;:21;;;;;;8977:27;;;;8969:82;;;;-1:-1:-1;;;8969:82:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9132:22;9129:389;;9179:10;9169:21;;;;:9;:21;;;;;;;;:32;;;9215:24;;;:14;:24;;;;;:31;;-1:-1:-1;;9215:31:1;9242:4;9215:31;;;9129:389;;;9387:10;9377:21;;;;:9;:21;;;;;;;;:32;;;9423:24;;;:14;:24;;;;;;:31;;-1:-1:-1;;9423:31:1;;;9450:4;9423:31;;;;9468;;;;;:39;;;;;;;9129:389;9609:37;;9637:8;;9625:10;;9609:37;;;;;8739:923;;:::o;2869:448::-;2999:10;;2990:6;:19;2982:64;;;;;-1:-1:-1;;;2982:64:1;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;2982:64:1;;;;;;;;;;;;;;;3089:10;3065:14;3082:18;;;:6;:18;;;;;;;;:26;;;;;;;;;3139:1;3126:14;;;3118:46;;;;;-1:-1:-1;;;3118:46:1;;;;;;;;;;;;-1:-1:-1;;;3118:46:1;;;;;;;;;;;;;;;3178:9;3191:1;3178:14;3174:67;;;3208:17;;;;:9;:17;;;;;:22;;-1:-1:-1;;3208:22:1;;;3174:67;-1:-1:-1;3257:10:1;3250:18;;;;:6;:18;;;;;;;;:26;;;;;;;;;3279:1;3250:30;;;;3290:7;:15;;;;;;:20;;;;;;;2869:448::o",
  "source": "pragma solidity >=0.4.23;\n\ncontract Hujan {\n    \n    //post related variables\n    uint postNumber; // keeps track of posts so that every one is unique\n    mapping (uint => address) postOwners; //Keeps track of who owns a specific post\n    mapping (uint => uint) upvotes; // keeps track of a posts vote counter\n    mapping (uint => uint) downvotes; // keeps track of a posts vote counter\n    mapping (address => mapping(uint => uint)) voters; //keeps track of a users voting history, helps to prevent vote spamming from a single account\n    \n    //comment related variables\n    mapping (uint => uint) commentCounter; // keeps track of posts so that every one is unique\n    mapping (uint => mapping(uint => address)) commentOwner; //Keeps track of who owns a specific post\n    mapping (uint => mapping(uint => uint)) commentUpVotes; // keeps track of a posts vote counter\n    mapping (uint => mapping(uint => uint)) commentDownVotes; // keeps track of a posts vote counter\n    mapping (address => mapping(uint => mapping(uint => uint))) commentVoters; //keeps track of a users voting history, helps to prevent vote spamming from a single account\n    \n    //Donation System\n    mapping (uint => uint) postEarnings;\n    //mapping (uint => mapping(uint => uint)) commentEarnings;\n    \n    //username System\n    mapping (bytes32 => bool) usernamesTaken;\n    mapping (address => bytes32) usernames;\n    \n    constructor () public {\n        postNumber = 0;\n    }\n    \n    //Invoked when the post has been created, so that the dApp can access the content\n    event PostContent (\n        address indexed author,\n        uint indexed id,\n        bytes tags,\n        uint postTimestamp, //used to generate private post unique key\n        bytes title,\n        bytes text\n    );\n    \n    //create a new post, done by storing data in the logs. data can be in any form as long as it is byte data. This means data can be compressed\n    function CreatePost(bytes memory title, bytes memory text, bytes memory tags) public {\n        \n        //check that the data is correct\n        require(title.length > 0, \"Invalid title\");\n        require(text.length > 0, \"Invalid text\");\n        require(tags.length > 0, \"Invalid tags\");\n        \n        uint postId = postNumber;\n        //init the mapping and set the owner as the sender\n        postOwners[postId] = msg.sender;\n        \n        //init votes so that the owner has upvoted by default.\n        upvotes[postId] = 1;\n        voters[msg.sender][postId] = 1;\n        \n        //posts are stored in logs, it allows to reduce post invocation cost\n        emit PostContent(msg.sender, postId, tags, now, title, text);\n        \n        postNumber = postId + 1;\n    }\n    \n    //get the owner of a post\n    function getOwner(uint postId) public view returns (address) {\n        return postOwners[postId];\n    }\n    \n    //upvote a post \n    function UpvotePost(uint postId) public {\n        require(postId >= 0, \"votes is not for a valid post\");\n        require(postId < postNumber, \"votes is for a non existent post\");\n        \n        uint knownType = voters[msg.sender][postId];\n        require(knownType != 1, \"Upvote already done\");\n        if (knownType == 2) {\n            downvotes[postId] -= 1;\n        }\n        voters[msg.sender][postId] = 1;\n        upvotes[postId] += 1;\n    }\n    \n    //downvote a post \n    function DownvotePost(uint postId) public {\n        require(postId >= 0, \"votes is not for a valid post\");\n        require(postId < postNumber, \"votes is for a non existent post\");\n\n        uint knownType = voters[msg.sender][postId];\n        require(knownType != 2, \"downvote already done\");\n        if (knownType == 1) {\n            upvotes[postId] -= 1;\n        }\n        voters[msg.sender][postId] = 2;\n        downvotes[postId] += 1;\n    }\n    \n    //get the vote data\n    function getUpVotes(uint postId) public view returns (uint) {\n        return upvotes[postId];\n    }\n\n    //get the vote data\n    function getDownVotes(uint postId) public view returns (uint) {\n        return downvotes[postId];\n    }\n    \n    //get the voter data\n    function getVoterData(uint postId, address voter) public view returns (uint) {\n        return voters[voter][postId];\n    }\n\n    /////////// Comment functionality\n\n    //stores a log comment on the blockchain when commented\n    event CommentCreated (\n        address indexed commenter,\n        uint indexed postId,\n        bytes comment,\n        uint parentComment,\n\t\tuint commentTimestamp,\n\t\tuint commentId\n    );\n    \n    function PostComment(bytes memory text, uint postId, uint parentComment) public {\n        require(postId >= 0, \"comment is not for a valid post\");\n        require(postId < postNumber, \"comment is for a non existent post\");\n        require(text.length > 0, \"comment comment is empty\");\n\t\t\n\t\t//update comment related variables\n        uint commentId = commentCounter[postId];\n\t\t\n\t\t//emit to the blockchain\n        emit CommentCreated(msg.sender, postId, text, parentComment, now, commentId);\n        \n\n        commentOwner[postId][commentId] = msg.sender;\n        \n        //deal with upvote data\n        commentUpVotes[postId][commentId] = 1;\n        commentVoters[msg.sender][postId][commentId] = 1;\n        \n        //increment counter when done\n        commentCounter[postId] = commentId + 1;\n    }\n    \n    //upvote a post \n    function UpvoteComment(uint postId, uint commendId) public {\n        require(postId >= 0, \"votes is not for a valid post\");\n        require(postId < postNumber, \"votes is for a non existent post\");\n        \n        require(commendId >= 0, \"comment id is not valid\");\n        require(commendId <= commentCounter[postId], \"comment id is non existent\");\n        require(commentVoters[msg.sender][postId][commendId] != 1, \"Upvote already done\");\n\n        if (commentVoters[msg.sender][postId][commendId] == 2) {\n            commentDownVotes[postId][commendId] -= 1;\n        }\n\n        commentVoters[msg.sender][postId][commendId] = 1;\n        commentUpVotes[postId][commendId] += 1;\n    }\n    \n    //downvote a post \n    function DownvoteComment(uint postId, uint commendId) public {\n        require(postId >= 0, \"votes is not for a valid post\");\n        require(postId < postNumber, \"votes is for a non existent post\");\n        \n        require(commendId >= 0, \"comment id is not valid\");\n        require(commendId <= commentCounter[postId], \"comment id is non existent\");\n        require(commentVoters[msg.sender][postId][commendId] != 2, \"Upvote already done\");\n        \n        if (commentVoters[msg.sender][postId][commendId] == 1) {\n            commentUpVotes[postId][commendId] -= 1;\n        }\n\n        commentVoters[msg.sender][postId][commendId] = 2;\n        commentDownVotes[postId][commendId] += 1;\n    }\n    \n    //get the comment vote data\n    function getCommentUpVotes(uint postId, uint commendId) public view returns (uint) {\n        return commentUpVotes[postId][commendId];\n    }\n\n    //get the comment vote data\n    function getCommentDownVotes(uint postId, uint commendId) public view returns (uint) {\n        return commentDownVotes[postId][commendId];\n    }\n    \n    //get the comment voter data\n    function getCommentVoterData(uint postId, uint commendId, address commenter) public view returns (uint) {\n        return commentVoters[commenter][postId][commendId];\n    } \n\n    //get the total number of posts\n    function getPostCounter() public view returns (uint) {\n        return postNumber;\n    }\n\n    //Donation System \n    \n    //make a donation to a post\n    function makeDonation(uint postId) public payable {\n        require(msg.value > 0, \"no attached value\");\n        require(postId >= 0, \"votes is not for a valid post\");\n        require(postId < postNumber, \"votes is for a non existent post\");\n        \n        address payable owner = address(uint160(postOwners[postId]));\n        owner.transfer(msg.value);\n        \n        //post owner\n        postEarnings[postId] += msg.value;\n        emit DonationMade(msg.sender, msg.value, now, postId);\n    }\n    \n    //Invoked when a donation is made\n    event DonationMade (\n        address indexed donator,\n        uint indexed donationValue,\n        uint donationTimestamp,\n        uint postid\n    );\n    \n    //get post donations\n    function getPostDonations(uint postId) public view returns (uint) {\n        return postEarnings[postId];\n    }\n    \n    // Username System\n    //Invoked when the post has been created, so that the dApp can access the content\n    event UsernameCreated (\n        address indexed user,\n        bytes32 indexed username\n    );\n    \n    //create a new post, done by storing data in the logs. data can be in any form as long as it is byte data. This means data can be compressed\n    function SetUsername(bytes32 username) public {\n        \n        require (usernamesTaken[username] == false, \"username is registered to an owner already\");\n        \n        bytes32 currentUsername = usernames[msg.sender];\n        require(currentUsername != username, \"This username is already set to the sender\");\n        \n        //if the user does not have a username then set it\n        if(currentUsername == 0x0){\n            usernames[msg.sender] = username;\n            usernamesTaken[username] = true;\n        }else{\n        //else update the currently known username and make the old username available to other users\n            usernames[msg.sender] = username;\n            usernamesTaken[username] = true;\n            usernamesTaken[currentUsername] = false;\n        }\n        //posts are stored in logs, it allows to reduce post invocation cost\n        emit UsernameCreated(msg.sender, username);\n        \n    }\n    \n    //get the stored username for a given address\n    function getUsername(address user) public view returns (bytes32) {\n        return usernames[user];\n    }\n\n    //UTIL FUNCTIONS\n\n    //get the user\n    function getSenderAddress() public view returns (address) {\n        return msg.sender;\n    }\n}\n",
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {
    "80001": {
      "events": {},
      "links": {},
      "address": "0x26Afa9CC330c044ADCC6651ecc2abAb858df14d0",
      "transactionHash": "0xf6f0a8988a86438782429f271c65f33fa0479c02e56f45108c76751f1fef0065"
    }
  },
  "schemaVersion": "3.4.1",
  "updatedAt": "2021-08-18T08:10:58.897Z",
  "networkType": "ethereum",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}

export {abi};